AWSTemplateFormatVersion: 2010-09-09
Description: |
  The Phonebook Application aims to create a phonebook application in Python and deployed as a web application with Flask on AWS Application Load Balancer with Auto Scaling Group of Elastic Compute Cloud (EC2) Instances and Relational Database Service (RDS) using AWS Cloudformation Service.

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC) 
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)


Resources:
 
  myAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
        - us-east-1d
        - us-east-1e
        - us-east-1f
      LaunchConfigurationName: !Ref myLaunchConfig
      HealthCheckType: ELB
      HealthCheckGracePeriod: 90   
      DesiredCapacity: '2'
      MinSize: '1'
      MaxSize: '3'
      TargetGroupARNs:
        - !Ref myALBTargetGroup

  myLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !Ref KeyName
      ImageId: ami-0947d2ba12ee1ff75
      UserData:
         Fn::Base64:
          !Sub |
            #! /bin/bash -xe
            sudo yum update -y
            cd /home/ec2-user
            mkdir templates
            cd templates
            wget https://raw.githubusercontent.com/albertsunn/aws-workshop/master/aws/projects/004-phonebook-web-application/templates/add-update.html
            wget https://raw.githubusercontent.com/albertsunn/aws-workshop/master/aws/projects/004-phonebook-web-application/templates/delete.html
            wget https://raw.githubusercontent.com/albertsunn/aws-workshop/master/aws/projects/004-phonebook-web-application/templates/index.html
            cd ..
            wget https://raw.githubusercontent.com/albertsunn/aws-workshop/master/aws/projects/004-phonebook-web-application/phonebook-app.py
            echo "${mySQLRDS.Endpoint.Address}" >> dbserver.endpoint
            sudo yum install python3 -y
            sudo pip3 install flask
            sudo pip3 install flask-mysql 
            sudo pip3 install flask-sqlalchemy
            sudo python3 phonebook-app.py
      SecurityGroups:
        - !Ref mySecurityGroup
      InstanceType: t2.micro
      

  myCPUPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref myAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60   
  

  myApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
        - !GetAtt mySecurityGroup.GroupId
      Subnets: !Ref Subnets
      

  myALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref myALBTargetGroup
      LoadBalancerArn: !Ref myApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  
  
  myALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 25 
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  
  
  mySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enables SSH and HTTP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
          

  mySQLRDS:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: 'db.t2.micro' #required
      DBSecurityGroups: 
        - !Ref myDBSec
      Engine: 'mysql'
      EngineVersion: '8.0.19'
      MasterUsername: 'admin'
      MasterUserPassword: 'clarusway-1'
      DBSecurityGroups:
        - !Ref RDSSecurityGroup
      MaxAllocatedStorage: 25




  RDSSecurityGroup:
    Type: "AWS::RDS::DBSecurityGroup"
    Properties:
      DBSecurityGroupIngress: #required
        - CIDRIP: 0.0.0.0/0
      GroupDescription: 'DataBaseSecurityGroup' #required
      
    

















          
    
Outputs:
  URL:
    Description: The URL of the website
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt myApplicationLoadBalancer.DNSName
AWSTemplateFormatVersion: 2010-09-09
Description: |
  The Milliseconds Converter Application aims to convert the given time in milliseconds into hours, minutes, and seconds. The application is to be coded in Python and deployed as a web application with Flask on AWS Application Load Balancer with Auto Scaling Group of Elastic Compute Cloud (EC2) Instances using AWS Cloudformation Service.

Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
  


Resources:

  MillisecondAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
        - us-east-1d
        - us-east-1e
        - us-east-1f
      LaunchConfigurationName: !Ref MillisecondLaunchConfig
      HealthCheckType: ELB
      HealthCheckGracePeriod: 90
      DesiredCapacity: '2'
      MinSize: '1'
      MaxSize: '3'
      TargetGroupARNs:
        - !Ref MillisecondElb


  MillisecondLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !Ref KeyName
      ImageId: ami-0947d2ba12ee1ff75
      UserData:
         Fn::Base64:
          !Sub |
            #! /bin/bash -xe
            mkdir templates
            cd templates
            wget https://raw.githubusercontent.com/albertsunn/aws-workshop/master/aws/projects/002-milliseconds-converter/templates/index.html
            wget https://raw.githubusercontent.com/albertsunn/aws-workshop/master/aws/projects/002-milliseconds-converter/templates/result.html
            cd ..
            wget https://raw.githubusercontent.com/albertsunn/aws-workshop/master/aws/projects/002-milliseconds-converter/app.py
            sudo yum update -y
            sudo yum install python3 -y
            sudo pip3 install flask
            sudo python3 app.py
      SecurityGroups:
        - !Ref MillisecondSecGrb
      InstanceType: t2.micro

  myCPUPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref MillisecondAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60 

  MillisecondLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
        - !GetAtt MillisecondSecGrb.GroupId
      Subnets: !Ref Subnets


  MillisecondListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref MillisecondElb
      LoadBalancerArn: !Ref MillisecondLoadBalancer
      Port: 80
      Protocol: HTTP

  MillisecondElb:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 25
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
      
  MillisecondSecGrb:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Millisecond SSH and HTTP secgroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80 
          ToPort: 80
          CidrIp: 0.0.0.0/0
  
  
Outputs:
  URL:
    Description: The URL of the website
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt MillisecondLoadBalancer.DNSName